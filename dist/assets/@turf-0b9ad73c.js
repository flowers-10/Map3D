function C(r,e,n){n===void 0&&(n={});var t={type:"Feature"};return(n.id===0||n.id)&&(t.id=n.id),n.bbox&&(t.bbox=n.bbox),t.properties=e||{},t.geometry=r,t}function k(r,e,n){if(n===void 0&&(n={}),!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!E(r[0])||!E(r[1]))throw new Error("coordinates must contain numbers");var t={type:"Point",coordinates:r};return C(t,e,n)}function R(r,e,n){n===void 0&&(n={});for(var t=0,a=r;t<a.length;t++){var l=a[t];if(l.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var f=0;f<l[l.length-1].length;f++)if(l[l.length-1][f]!==l[0][f])throw new Error("First and last Position are not equivalent.")}var o={type:"Polygon",coordinates:r};return C(o,e,n)}function E(r){return!isNaN(r)&&r!==null&&!Array.isArray(r)}function S(r,e,n){if(r!==null)for(var t,a,l,f,o,i,s,y=0,u=0,g,A=r.type,c=A==="FeatureCollection",m=A==="Feature",q=c?r.features.length:1,w=0;w<q;w++){s=c?r.features[w].geometry:m?r.geometry:r,g=s?s.type==="GeometryCollection":!1,o=g?s.geometries.length:1;for(var b=0;b<o;b++){var h=0,P=0;if(f=g?s.geometries[b]:s,f!==null){i=f.coordinates;var v=f.type;switch(y=n&&(v==="Polygon"||v==="MultiPolygon")?1:0,v){case null:break;case"Point":if(e(i,u,w,h,P)===!1)return!1;u++,h++;break;case"LineString":case"MultiPoint":for(t=0;t<i.length;t++){if(e(i[t],u,w,h,P)===!1)return!1;u++,v==="MultiPoint"&&h++}v==="LineString"&&h++;break;case"Polygon":case"MultiLineString":for(t=0;t<i.length;t++){for(a=0;a<i[t].length-y;a++){if(e(i[t][a],u,w,h,P)===!1)return!1;u++}v==="MultiLineString"&&h++,v==="Polygon"&&P++}v==="Polygon"&&h++;break;case"MultiPolygon":for(t=0;t<i.length;t++){for(P=0,a=0;a<i[t].length;a++){for(l=0;l<i[t][a].length-y;l++){if(e(i[t][a][l],u,w,h,P)===!1)return!1;u++}P++}h++}break;case"GeometryCollection":for(t=0;t<f.geometries.length;t++)if(S(f.geometries[t],e,n)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function G(r){var e=[1/0,1/0,-1/0,-1/0];return S(r,function(n){e[0]>n[0]&&(e[0]=n[0]),e[1]>n[1]&&(e[1]=n[1]),e[2]<n[0]&&(e[2]=n[0]),e[3]<n[1]&&(e[3]=n[1])}),e}G.default=G;function L(r){if(!r)throw new Error("coord is required");if(!Array.isArray(r)){if(r.type==="Feature"&&r.geometry!==null&&r.geometry.type==="Point")return r.geometry.coordinates;if(r.type==="Point")return r.coordinates}if(Array.isArray(r)&&r.length>=2&&!Array.isArray(r[0])&&!Array.isArray(r[1]))return r;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function B(r){return r.type==="Feature"?r.geometry:r}function J(r,e,n){if(n===void 0&&(n={}),!r)throw new Error("point is required");if(!e)throw new Error("polygon is required");var t=L(r),a=B(e),l=a.type,f=e.bbox,o=a.coordinates;if(f&&N(t,f)===!1)return!1;l==="Polygon"&&(o=[o]);for(var i=!1,s=0;s<o.length&&!i;s++)if(M(t,o[s][0],n.ignoreBoundary)){for(var y=!1,u=1;u<o[s].length&&!y;)M(t,o[s][u],!n.ignoreBoundary)&&(y=!0),u++;y||(i=!0)}return i}function M(r,e,n){var t=!1;e[0][0]===e[e.length-1][0]&&e[0][1]===e[e.length-1][1]&&(e=e.slice(0,e.length-1));for(var a=0,l=e.length-1;a<e.length;l=a++){var f=e[a][0],o=e[a][1],i=e[l][0],s=e[l][1],y=r[1]*(f-i)+o*(i-r[0])+s*(r[0]-f)===0&&(f-r[0])*(i-r[0])<=0&&(o-r[1])*(s-r[1])<=0;if(y)return!n;var u=o>r[1]!=s>r[1]&&r[0]<(i-f)*(r[1]-o)/(s-o)+f;u&&(t=!t)}return t}function N(r,e){return e[0]<=r[0]&&e[1]<=r[1]&&e[2]>=r[0]&&e[3]>=r[1]}export{k as a,G as b,J as c,R as p};
